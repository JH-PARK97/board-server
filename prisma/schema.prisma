generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  nickname         String     @unique
  age              Int
  gender           String
  phoneNumber      String
  password         String
  profileImagePath String
  posts            Post[]
  comment          Comment[]
  replies          Reply[]
  categories       Category[]

  profile Profile?
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  likeCount  Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     Int
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  categories Category[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies  Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String
  tags   Tag[]
  posts  Post[]
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Profile {
  id         Int    @id @default(autoincrement())
  avatarUrl  String
  filename   String
  mimeType   String
  fk_user_id Int?   @unique
  user       User?  @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([fk_user_id], map: "profiles_fk_user_id")
  @@map("user_images")
}
